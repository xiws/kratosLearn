// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.29.2
// source: Common/Health.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCommonServiceGetHealth = "/CommonService/GetHealth"

type CommonServiceHTTPServer interface {
	GetHealth(context.Context, *EmptyRequest) (*EmptyReply, error)
}

func RegisterCommonServiceHTTPServer(s *http.Server, srv CommonServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/health", _CommonService_GetHealth0_HTTP_Handler(srv))
}

func _CommonService_GetHealth0_HTTP_Handler(srv CommonServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EmptyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCommonServiceGetHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHealth(ctx, req.(*EmptyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EmptyReply)
		return ctx.Result(200, reply)
	}
}

type CommonServiceHTTPClient interface {
	GetHealth(ctx context.Context, req *EmptyRequest, opts ...http.CallOption) (rsp *EmptyReply, err error)
}

type CommonServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCommonServiceHTTPClient(client *http.Client) CommonServiceHTTPClient {
	return &CommonServiceHTTPClientImpl{client}
}

func (c *CommonServiceHTTPClientImpl) GetHealth(ctx context.Context, in *EmptyRequest, opts ...http.CallOption) (*EmptyReply, error) {
	var out EmptyReply
	pattern := "/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCommonServiceGetHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
